import * as tslib_1 from "tslib";
import { Component, Input, EventEmitter, Output } from '@angular/core';
let CountDownComponent = class CountDownComponent {
    constructor() {
        this.reached = new EventEmitter();
        this.wasReached = false;
    }
    dhms(t) {
        let days, hours, minutes, seconds;
        days = Math.floor(t / 86400);
        t -= days * 86400;
        hours = Math.floor(t / 3600) % 24;
        t -= hours * 3600;
        minutes = Math.floor(t / 60) % 60;
        t -= minutes * 60;
        seconds = t % 60;
        const retArr = [];
        if (days > 0) {
            retArr.push(days + ' days');
            retArr.push(hours + ' hours');
        }
        else if (hours > 0) {
            retArr.push(hours + ' hours');
            retArr.push(minutes + ' mins');
        }
        else if (minutes > 0) {
            retArr.push(minutes + ' mins');
            retArr.push(seconds + ' secs');
        }
        else {
            retArr.push(seconds + ' secs');
        }
        return retArr.join(' ');
    }
    ngOnInit() {
        setInterval(() => {
            if (this.wasReached) {
                return;
            }
            const now = new Date();
            const dateDifference = this.date.getTime() - now.getTime();
            if ((dateDifference < 1000 && dateDifference > 0) || dateDifference < 0 && !this.wasReached) {
                this.wasReached = true;
                this.reached.emit(this.wasReached);
                return;
            }
            const unixSecTime = Math.floor((this.date.getTime() - new Date().getTime()) / 1000);
            this.counterText = this.dhms(unixSecTime);
        }, 1000);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Date)
], CountDownComponent.prototype, "date", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], CountDownComponent.prototype, "reached", void 0);
CountDownComponent = tslib_1.__decorate([
    Component({
        selector: 'ts-countdown',
        template: '<span>{{counterText}}</span>'
    }),
    tslib_1.__metadata("design:paramtypes", [])
], CountDownComponent);
export { CountDownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG93bnNjcmlwdC9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50cy9jb3VudC1kb3duL2NvdW50LWRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTS9FLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBTzNCO1FBSFUsWUFBTyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlELGVBQVUsR0FBRyxLQUFLLENBQUM7SUFHbkIsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFDO1FBQ0YsSUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDbEMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEMsQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxDQUFDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFDNUIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDbEM7YUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRCxRQUFRO1FBRUosV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsT0FBTzthQUNWO1lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUUzRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLE9BQU87YUFDVjtZQUVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKLENBQUE7QUF4RFk7SUFBUixLQUFLLEVBQUU7c0NBQU8sSUFBSTtnREFBQztBQUVWO0lBQVQsTUFBTSxFQUFFO3NDQUFVLFlBQVk7bURBQStCO0FBSnJELGtCQUFrQjtJQUo5QixTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsY0FBYztRQUN4QixRQUFRLEVBQUUsOEJBQThCO0tBQzNDLENBQUM7O0dBQ1csa0JBQWtCLENBMEQ5QjtTQTFEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHMtY291bnRkb3duJyxcbiAgICB0ZW1wbGF0ZTogJzxzcGFuPnt7Y291bnRlclRleHR9fTwvc3Bhbj4nXG59KVxuZXhwb3J0IGNsYXNzIENvdW50RG93bkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBASW5wdXQoKSBkYXRlOiBEYXRlO1xuICAgIGNvdW50ZXJUZXh0OiBzdHJpbmc7XG4gICAgQE91dHB1dCgpIHJlYWNoZWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB3YXNSZWFjaGVkID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBkaG1zKHQpIHtcbiAgICAgICAgbGV0IGRheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzO1xuICAgICAgICBkYXlzID0gTWF0aC5mbG9vcih0IC8gODY0MDApO1xuICAgICAgICB0IC09IGRheXMgKiA4NjQwMDtcbiAgICAgICAgaG91cnMgPSBNYXRoLmZsb29yKHQgLyAzNjAwKSAlIDI0O1xuICAgICAgICB0IC09IGhvdXJzICogMzYwMDtcbiAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IodCAvIDYwKSAlIDYwO1xuICAgICAgICB0IC09IG1pbnV0ZXMgKiA2MDtcbiAgICAgICAgc2Vjb25kcyA9IHQgJSA2MDtcblxuICAgICAgICBjb25zdCByZXRBcnI6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChkYXlzID4gMCkge1xuICAgICAgICAgICAgcmV0QXJyLnB1c2goZGF5cyArICcgZGF5cycpO1xuICAgICAgICAgICAgcmV0QXJyLnB1c2goaG91cnMgKyAnIGhvdXJzJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPiAwKSB7XG4gICAgICAgICAgICByZXRBcnIucHVzaChob3VycyArICcgaG91cnMnKTtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKG1pbnV0ZXMgKyAnIG1pbnMnKTtcbiAgICAgICAgfSBlbHNlIGlmIChtaW51dGVzID4gMCkge1xuICAgICAgICAgICAgcmV0QXJyLnB1c2gobWludXRlcyArICcgbWlucycpO1xuICAgICAgICAgICAgcmV0QXJyLnB1c2goc2Vjb25kcyArICcgc2VjcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0QXJyLnB1c2goc2Vjb25kcyArICcgc2VjcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFyci5qb2luKCcgJyk7XG4gICAgfVxuXG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy53YXNSZWFjaGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgZGF0ZURpZmZlcmVuY2UgPSB0aGlzLmRhdGUuZ2V0VGltZSgpIC0gbm93LmdldFRpbWUoKTtcblxuICAgICAgICAgICAgaWYgKChkYXRlRGlmZmVyZW5jZSA8IDEwMDAgJiYgZGF0ZURpZmZlcmVuY2UgPiAwKSB8fCBkYXRlRGlmZmVyZW5jZSA8IDAgJiYgIXRoaXMud2FzUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud2FzUmVhY2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWFjaGVkLmVtaXQodGhpcy53YXNSZWFjaGVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHVuaXhTZWNUaW1lID0gTWF0aC5mbG9vcigodGhpcy5kYXRlLmdldFRpbWUoKSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSAvIDEwMDApO1xuICAgICAgICAgICAgdGhpcy5jb3VudGVyVGV4dCA9IHRoaXMuZGhtcyh1bml4U2VjVGltZSk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cbn1cbiJdfQ==