import { __decorate } from "tslib";
import { Component, Input, EventEmitter, Output } from '@angular/core';
let CountDownComponent = class CountDownComponent {
    constructor() {
        this.reached = new EventEmitter();
        this.wasReached = false;
    }
    dhms(t) {
        let days, hours, minutes, seconds;
        days = Math.floor(t / 86400);
        t -= days * 86400;
        hours = Math.floor(t / 3600) % 24;
        t -= hours * 3600;
        minutes = Math.floor(t / 60) % 60;
        t -= minutes * 60;
        seconds = t % 60;
        const retArr = [];
        if (days > 0) {
            retArr.push(days + ' days');
            retArr.push(hours + ' hours');
        }
        else if (hours > 0) {
            retArr.push(hours + ' hours');
            retArr.push(minutes + ' mins');
        }
        else if (minutes > 0) {
            retArr.push(minutes + ' mins');
            retArr.push(seconds + ' secs');
        }
        else {
            retArr.push(seconds + ' secs');
        }
        return retArr.join(' ');
    }
    ngOnInit() {
        setInterval(() => {
            if (this.wasReached) {
                return;
            }
            const now = new Date();
            const dateDifference = this.date.getTime() - now.getTime();
            if ((dateDifference < 1000 && dateDifference > 0) || dateDifference < 0 && !this.wasReached) {
                this.wasReached = true;
                this.reached.emit(this.wasReached);
                return;
            }
            const unixSecTime = Math.floor((this.date.getTime() - new Date().getTime()) / 1000);
            this.counterText = this.dhms(unixSecTime);
        }, 1000);
    }
};
__decorate([
    Input()
], CountDownComponent.prototype, "date", void 0);
__decorate([
    Output()
], CountDownComponent.prototype, "reached", void 0);
CountDownComponent = __decorate([
    Component({
        selector: 'ts-countdown',
        template: '<span>{{counterText}}</span>'
    })
], CountDownComponent);
export { CountDownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtZG93bi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdG93bnNjcmlwdC9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50cy9jb3VudC1kb3duL2NvdW50LWRvd24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTS9FLElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBTzNCO1FBSFUsWUFBTyxHQUEwQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlELGVBQVUsR0FBRyxLQUFLLENBQUM7SUFHbkIsQ0FBQztJQUVELElBQUksQ0FBQyxDQUFDO1FBQ0YsSUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDbEMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEMsQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxDQUFDLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixPQUFPLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFDNUIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDbEM7YUFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFHRCxRQUFRO1FBRUosV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakIsT0FBTzthQUNWO1lBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUN2QixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUUzRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDLElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3pGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLE9BQU87YUFDVjtZQUVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKLENBQUE7QUF4RFk7SUFBUixLQUFLLEVBQUU7Z0RBQVk7QUFFVjtJQUFULE1BQU0sRUFBRTttREFBcUQ7QUFKckQsa0JBQWtCO0lBSjlCLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxjQUFjO1FBQ3hCLFFBQVEsRUFBRSw4QkFBOEI7S0FDM0MsQ0FBQztHQUNXLGtCQUFrQixDQTBEOUI7U0ExRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3RzLWNvdW50ZG93bicsXG4gICAgdGVtcGxhdGU6ICc8c3Bhbj57e2NvdW50ZXJUZXh0fX08L3NwYW4+J1xufSlcbmV4cG9ydCBjbGFzcyBDb3VudERvd25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQElucHV0KCkgZGF0ZTogRGF0ZTtcbiAgICBjb3VudGVyVGV4dDogc3RyaW5nO1xuICAgIEBPdXRwdXQoKSByZWFjaGVkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgd2FzUmVhY2hlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgZGhtcyh0KSB7XG4gICAgICAgIGxldCBkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcztcbiAgICAgICAgZGF5cyA9IE1hdGguZmxvb3IodCAvIDg2NDAwKTtcbiAgICAgICAgdCAtPSBkYXlzICogODY0MDA7XG4gICAgICAgIGhvdXJzID0gTWF0aC5mbG9vcih0IC8gMzYwMCkgJSAyNDtcbiAgICAgICAgdCAtPSBob3VycyAqIDM2MDA7XG4gICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHQgLyA2MCkgJSA2MDtcbiAgICAgICAgdCAtPSBtaW51dGVzICogNjA7XG4gICAgICAgIHNlY29uZHMgPSB0ICUgNjA7XG5cbiAgICAgICAgY29uc3QgcmV0QXJyOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAoZGF5cyA+IDApIHtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKGRheXMgKyAnIGRheXMnKTtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKGhvdXJzICsgJyBob3VycycpO1xuICAgICAgICB9IGVsc2UgaWYgKGhvdXJzID4gMCkge1xuICAgICAgICAgICAgcmV0QXJyLnB1c2goaG91cnMgKyAnIGhvdXJzJyk7XG4gICAgICAgICAgICByZXRBcnIucHVzaChtaW51dGVzICsgJyBtaW5zJyk7XG4gICAgICAgIH0gZWxzZSBpZiAobWludXRlcyA+IDApIHtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKG1pbnV0ZXMgKyAnIG1pbnMnKTtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKHNlY29uZHMgKyAnIHNlY3MnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldEFyci5wdXNoKHNlY29uZHMgKyAnIHNlY3MnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnIuam9pbignICcpO1xuICAgIH1cblxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMud2FzUmVhY2hlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVEaWZmZXJlbmNlID0gdGhpcy5kYXRlLmdldFRpbWUoKSAtIG5vdy5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGlmICgoZGF0ZURpZmZlcmVuY2UgPCAxMDAwICYmIGRhdGVEaWZmZXJlbmNlID4gMCkgfHwgZGF0ZURpZmZlcmVuY2UgPCAwICYmICF0aGlzLndhc1JlYWNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhc1JlYWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVhY2hlZC5lbWl0KHRoaXMud2FzUmVhY2hlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB1bml4U2VjVGltZSA9IE1hdGguZmxvb3IoKHRoaXMuZGF0ZS5nZXRUaW1lKCkgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKSkgLyAxMDAwKTtcbiAgICAgICAgICAgIHRoaXMuY291bnRlclRleHQgPSB0aGlzLmRobXModW5peFNlY1RpbWUpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9XG59XG4iXX0=