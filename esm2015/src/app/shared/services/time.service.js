import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DateTime } from 'luxon';
import { rrulestr } from 'rrule';
let TimeService = class TimeService {
    constructor() {
        this.convertDateToTimezone = (date, timeZoneOffset) => {
            const dateVar = DateTime.fromISO(date, { zone: timeZoneOffset });
            const dateString = DateTime.fromISO(dateVar).toString();
            return this.formatLocalDate(new Date(dateString));
        };
        this.formatLocalDate = (now) => {
            const tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                const norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
        this.dateTimeWithinHours = (date, hours) => {
            const compareDate = Date.now() + (hours * 60 * 60 * 1000);
            const dateTime = date.getTime();
            return compareDate > dateTime && dateTime > Date.now();
        };
        this.nextOccurenceFromRRule = (startDate, endDate, rruleString, recTime) => {
            const ddMMyyyyDate = DateTime.fromJSDate(startDate).toFormat('dd-MM-yyyy');
            const dtstart = DateTime.fromFormat(`${ddMMyyyyDate} ${recTime}`, 'dd-MM-yyyy hh:mm a').toJSDate();
            const rrule = rrulestr(rruleString, { 'dtstart': dtstart });
            const recDates = rrule.between(dtstart, endDate).filter(date => date > new Date());
            return recDates.length > 0 ? recDates[0] : startDate;
        };
    }
};
TimeService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], TimeService);
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHakMsSUFBYSxXQUFXLEdBQXhCLE1BQWEsV0FBVztJQUVwQjtRQUdBLDBCQUFxQixHQUFHLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBTyxFQUFFO1lBQ2xELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDakUsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUE7UUFFRCxvQkFBZSxHQUFHLENBQUMsR0FBRyxFQUFPLEVBQUU7WUFDM0IsTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFDaEMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUMxQixHQUFHLEdBQUcsVUFBVSxHQUFHO2dCQUNmLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDekMsQ0FBQyxDQUFDO1lBQ04sT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFO2tCQUNsQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7a0JBQzdCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO2tCQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztrQkFDekIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzNCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2tCQUMzQixNQUFNO2tCQUNOLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztrQkFDbkIsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFRCx3QkFBbUIsR0FBRyxDQUFDLElBQVUsRUFBRSxLQUFhLEVBQVcsRUFBRTtZQUN6RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUMxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEMsT0FBTyxXQUFXLEdBQUcsUUFBUSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDM0QsQ0FBQyxDQUFBO1FBRUQsMkJBQXNCLEdBQUcsQ0FBQyxTQUFlLEVBQUUsT0FBYSxFQUFFLFdBQW1CLEVBQUUsT0FBZSxFQUFRLEVBQUU7WUFFcEcsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0UsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksSUFBSSxPQUFPLEVBQUUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRW5HLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUM1RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLE9BQU8sUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3pELENBQUMsQ0FBQTtJQXhDRCxDQUFDO0NBeUNKLENBQUE7QUE1Q1ksV0FBVztJQUR2QixVQUFVLEVBQUU7O0dBQ0EsV0FBVyxDQTRDdkI7U0E1Q1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuaW1wb3J0IHsgcnJ1bGVzdHIgfSBmcm9tICdycnVsZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBjb252ZXJ0RGF0ZVRvVGltZXpvbmUgPSAoZGF0ZSwgdGltZVpvbmVPZmZzZXQpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCBkYXRlVmFyID0gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlLCB7IHpvbmU6IHRpbWVab25lT2Zmc2V0IH0pO1xuICAgICAgICBjb25zdCBkYXRlU3RyaW5nID0gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlVmFyKS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRMb2NhbERhdGUobmV3IERhdGUoZGF0ZVN0cmluZykpO1xuICAgIH1cblxuICAgIGZvcm1hdExvY2FsRGF0ZSA9IChub3cpOiBhbnkgPT4ge1xuICAgICAgICBjb25zdCB0em8gPSAtbm93LmdldFRpbWV6b25lT2Zmc2V0KCksXG4gICAgICAgICAgICBkaWYgPSB0em8gPj0gMCA/ICcrJyA6ICctJyxcbiAgICAgICAgICAgIHBhZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtID0gTWF0aC5hYnMoTWF0aC5mbG9vcihudW0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG5vcm0gPCAxMCA/ICcwJyA6ICcnKSArIG5vcm07XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbm93LmdldEZ1bGxZZWFyKClcbiAgICAgICAgICAgICsgJy0nICsgcGFkKG5vdy5nZXRNb250aCgpICsgMSlcbiAgICAgICAgICAgICsgJy0nICsgcGFkKG5vdy5nZXREYXRlKCkpXG4gICAgICAgICAgICArICdUJyArIHBhZChub3cuZ2V0SG91cnMoKSlcbiAgICAgICAgICAgICsgJzonICsgcGFkKG5vdy5nZXRNaW51dGVzKCkpXG4gICAgICAgICAgICArICc6JyArIHBhZChub3cuZ2V0U2Vjb25kcygpKVxuICAgICAgICAgICAgKyAnLjAwMCdcbiAgICAgICAgICAgICsgZGlmICsgcGFkKHR6byAvIDYwKVxuICAgICAgICAgICAgKyBwYWQodHpvICUgNjApO1xuICAgIH1cblxuICAgIGRhdGVUaW1lV2l0aGluSG91cnMgPSAoZGF0ZTogRGF0ZSwgaG91cnM6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCBjb21wYXJlRGF0ZSA9IERhdGUubm93KCkgKyAoaG91cnMgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgICAgIGNvbnN0IGRhdGVUaW1lID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIHJldHVybiBjb21wYXJlRGF0ZSA+IGRhdGVUaW1lICYmIGRhdGVUaW1lID4gRGF0ZS5ub3coKTtcbiAgICB9XG5cbiAgICBuZXh0T2NjdXJlbmNlRnJvbVJSdWxlID0gKHN0YXJ0RGF0ZTogRGF0ZSwgZW5kRGF0ZTogRGF0ZSwgcnJ1bGVTdHJpbmc6IHN0cmluZywgcmVjVGltZTogc3RyaW5nKTogRGF0ZSA9PiB7XG5cbiAgICAgICAgY29uc3QgZGRNTXl5eXlEYXRlID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShzdGFydERhdGUpLnRvRm9ybWF0KCdkZC1NTS15eXl5Jyk7XG4gICAgICAgIGNvbnN0IGR0c3RhcnQgPSBEYXRlVGltZS5mcm9tRm9ybWF0KGAke2RkTU15eXl5RGF0ZX0gJHtyZWNUaW1lfWAsICdkZC1NTS15eXl5IGhoOm1tIGEnKS50b0pTRGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IHJydWxlID0gcnJ1bGVzdHIocnJ1bGVTdHJpbmcsIHsgJ2R0c3RhcnQnOiBkdHN0YXJ0IH0pO1xuICAgICAgICBjb25zdCByZWNEYXRlcyA9IHJydWxlLmJldHdlZW4oZHRzdGFydCwgZW5kRGF0ZSkuZmlsdGVyKGRhdGUgPT4gZGF0ZSA+IG5ldyBEYXRlKCkpO1xuICAgICAgICByZXR1cm4gcmVjRGF0ZXMubGVuZ3RoID4gMCA/IHJlY0RhdGVzWzBdIDogc3RhcnREYXRlO1xuICAgIH1cbn1cbiJdfQ==