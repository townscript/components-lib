import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DateTime } from 'luxon';
let TimeService = class TimeService {
    constructor() {
        this.convertDateToTimezone = (date, timeZoneOffset) => {
            const dateVar = DateTime.fromISO(date, { zone: timeZoneOffset });
            const dateString = DateTime.fromISO(dateVar).toString();
            return this.formatLocalDate(new Date(dateString));
        };
        this.formatLocalDate = (now) => {
            const tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                const norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
        this.dateTimeWithinHours = (date, hours) => {
            const compareDate = Date.now() + (hours * 60 * 60 * 1000);
            const dateTime = date.getTime();
            return compareDate > dateTime && dateTime > Date.now();
        };
    }
};
TimeService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], TimeService);
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBR2pDLElBQWEsV0FBVyxHQUF4QixNQUFhLFdBQVc7SUFFcEI7UUFHQSwwQkFBcUIsR0FBRyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQU8sRUFBRTtZQUNsRCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFBO1FBRUQsb0JBQWUsR0FBRyxDQUFDLEdBQUcsRUFBTyxFQUFFO1lBQzNCLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQ2hDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFDMUIsR0FBRyxHQUFHLFVBQVUsR0FBRztnQkFDZixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDdkMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3pDLENBQUMsQ0FBQztZQUNOLE9BQU8sR0FBRyxDQUFDLFdBQVcsRUFBRTtrQkFDbEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2tCQUM3QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztrQkFDeEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7a0JBQ3pCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2tCQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztrQkFDM0IsTUFBTTtrQkFDTixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7a0JBQ25CLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFBO1FBRUQsd0JBQW1CLEdBQUcsQ0FBQyxJQUFVLEVBQUUsS0FBYSxFQUFXLEVBQUU7WUFDekQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDMUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2hDLE9BQU8sV0FBVyxHQUFHLFFBQVEsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNELENBQUMsQ0FBQTtJQTlCRCxDQUFDO0NBK0JKLENBQUE7QUFsQ1ksV0FBVztJQUR2QixVQUFVLEVBQUU7O0dBQ0EsV0FBVyxDQWtDdkI7U0FsQ1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZVNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgY29udmVydERhdGVUb1RpbWV6b25lID0gKGRhdGUsIHRpbWVab25lT2Zmc2V0KTogYW55ID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZVZhciA9IERhdGVUaW1lLmZyb21JU08oZGF0ZSwgeyB6b25lOiB0aW1lWm9uZU9mZnNldCB9KTtcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IERhdGVUaW1lLmZyb21JU08oZGF0ZVZhcikudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TG9jYWxEYXRlKG5ldyBEYXRlKGRhdGVTdHJpbmcpKTtcbiAgICB9XG5cbiAgICBmb3JtYXRMb2NhbERhdGUgPSAobm93KTogYW55ID0+IHtcbiAgICAgICAgY29uc3QgdHpvID0gLW5vdy5nZXRUaW1lem9uZU9mZnNldCgpLFxuICAgICAgICAgICAgZGlmID0gdHpvID49IDAgPyAnKycgOiAnLScsXG4gICAgICAgICAgICBwYWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybSA9IE1hdGguYWJzKE1hdGguZmxvb3IobnVtKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChub3JtIDwgMTAgPyAnMCcgOiAnJykgKyBub3JtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5vdy5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgKyAnVCcgKyBwYWQobm93LmdldEhvdXJzKCkpXG4gICAgICAgICAgICArICc6JyArIHBhZChub3cuZ2V0TWludXRlcygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldFNlY29uZHMoKSlcbiAgICAgICAgICAgICsgJy4wMDAnXG4gICAgICAgICAgICArIGRpZiArIHBhZCh0em8gLyA2MClcbiAgICAgICAgICAgICsgcGFkKHR6byAlIDYwKTtcbiAgICB9XG5cbiAgICBkYXRlVGltZVdpdGhpbkhvdXJzID0gKGRhdGU6IERhdGUsIGhvdXJzOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgY29tcGFyZURhdGUgPSBEYXRlLm5vdygpICsgKGhvdXJzICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICBjb25zdCBkYXRlVGltZSA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICByZXR1cm4gY29tcGFyZURhdGUgPiBkYXRlVGltZSAmJiBkYXRlVGltZSA+IERhdGUubm93KCk7XG4gICAgfVxufVxuIl19