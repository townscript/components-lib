import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { DateTime } from 'luxon';
import { rrulestr } from 'rrule';
var TimeService = /** @class */ (function () {
    function TimeService() {
        var _this = this;
        this.convertDateToTimezone = function (date, timeZoneOffset) {
            var dateVar = DateTime.fromISO(date, { zone: timeZoneOffset });
            var dateString = DateTime.fromISO(dateVar).toString();
            return _this.formatLocalDate(new Date(dateString));
        };
        this.formatLocalDate = function (now) {
            var tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                var norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
        this.dateTimeWithinHours = function (date, hours) {
            var compareDate = Date.now() + (hours * 60 * 60 * 1000);
            var dateTime = date.getTime();
            return compareDate > dateTime && dateTime > Date.now();
        };
        this.nextOccurenceFromRRule = function (startDate, endDate, rruleString, recTime) {
            var ddMMyyyyDate = DateTime.fromJSDate(startDate).toFormat('dd-MM-yyyy');
            var dtstart = DateTime.fromFormat(ddMMyyyyDate + " " + recTime, 'dd-MM-yyyy hh:mm a').toJSDate();
            var rrule = rrulestr(rruleString, { 'dtstart': dtstart });
            var recDates = rrule.between(dtstart, endDate, true).filter(function (date) { return date > new Date(); });
            return recDates.length > 0 ? recDates[0] : startDate;
        };
    }
    TimeService = __decorate([
        Injectable()
    ], TimeService);
    return TimeService;
}());
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHakM7SUFFSTtRQUFBLGlCQUNDO1FBRUQsMEJBQXFCLEdBQUcsVUFBQyxJQUFJLEVBQUUsY0FBYztZQUN6QyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEQsT0FBTyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFBO1FBRUQsb0JBQWUsR0FBRyxVQUFDLEdBQUc7WUFDbEIsSUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFDaEMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUMxQixHQUFHLEdBQUcsVUFBVSxHQUFHO2dCQUNmLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDekMsQ0FBQyxDQUFDO1lBQ04sT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFO2tCQUNsQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7a0JBQzdCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO2tCQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztrQkFDekIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzNCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2tCQUMzQixNQUFNO2tCQUNOLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztrQkFDbkIsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFRCx3QkFBbUIsR0FBRyxVQUFDLElBQVUsRUFBRSxLQUFhO1lBQzVDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzFELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQyxPQUFPLFdBQVcsR0FBRyxRQUFRLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxDQUFDLENBQUE7UUFFRCwyQkFBc0IsR0FBRyxVQUFDLFNBQWUsRUFBRSxPQUFhLEVBQUUsV0FBbUIsRUFBRSxPQUFlO1lBRTFGLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNFLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUksWUFBWSxTQUFJLE9BQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRW5HLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUM1RCxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztZQUN6RixPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6RCxDQUFDLENBQUE7SUF4Q0QsQ0FBQztJQUhRLFdBQVc7UUFEdkIsVUFBVSxFQUFFO09BQ0EsV0FBVyxDQTRDdkI7SUFBRCxrQkFBQztDQUFBLEFBNUNELElBNENDO1NBNUNZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJztcbmltcG9ydCB7IHJydWxlc3RyIH0gZnJvbSAncnJ1bGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZVNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgY29udmVydERhdGVUb1RpbWV6b25lID0gKGRhdGUsIHRpbWVab25lT2Zmc2V0KTogYW55ID0+IHtcbiAgICAgICAgY29uc3QgZGF0ZVZhciA9IERhdGVUaW1lLmZyb21JU08oZGF0ZSwgeyB6b25lOiB0aW1lWm9uZU9mZnNldCB9KTtcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IERhdGVUaW1lLmZyb21JU08oZGF0ZVZhcikudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TG9jYWxEYXRlKG5ldyBEYXRlKGRhdGVTdHJpbmcpKTtcbiAgICB9XG5cbiAgICBmb3JtYXRMb2NhbERhdGUgPSAobm93KTogYW55ID0+IHtcbiAgICAgICAgY29uc3QgdHpvID0gLW5vdy5nZXRUaW1lem9uZU9mZnNldCgpLFxuICAgICAgICAgICAgZGlmID0gdHpvID49IDAgPyAnKycgOiAnLScsXG4gICAgICAgICAgICBwYWQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybSA9IE1hdGguYWJzKE1hdGguZmxvb3IobnVtKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChub3JtIDwgMTAgPyAnMCcgOiAnJykgKyBub3JtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5vdy5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgKyAnVCcgKyBwYWQobm93LmdldEhvdXJzKCkpXG4gICAgICAgICAgICArICc6JyArIHBhZChub3cuZ2V0TWludXRlcygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldFNlY29uZHMoKSlcbiAgICAgICAgICAgICsgJy4wMDAnXG4gICAgICAgICAgICArIGRpZiArIHBhZCh0em8gLyA2MClcbiAgICAgICAgICAgICsgcGFkKHR6byAlIDYwKTtcbiAgICB9XG5cbiAgICBkYXRlVGltZVdpdGhpbkhvdXJzID0gKGRhdGU6IERhdGUsIGhvdXJzOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgY29tcGFyZURhdGUgPSBEYXRlLm5vdygpICsgKGhvdXJzICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgICBjb25zdCBkYXRlVGltZSA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICByZXR1cm4gY29tcGFyZURhdGUgPiBkYXRlVGltZSAmJiBkYXRlVGltZSA+IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgbmV4dE9jY3VyZW5jZUZyb21SUnVsZSA9IChzdGFydERhdGU6IERhdGUsIGVuZERhdGU6IERhdGUsIHJydWxlU3RyaW5nOiBzdHJpbmcsIHJlY1RpbWU6IHN0cmluZyk6IERhdGUgPT4ge1xuXG4gICAgICAgIGNvbnN0IGRkTU15eXl5RGF0ZSA9IERhdGVUaW1lLmZyb21KU0RhdGUoc3RhcnREYXRlKS50b0Zvcm1hdCgnZGQtTU0teXl5eScpO1xuICAgICAgICBjb25zdCBkdHN0YXJ0ID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChgJHtkZE1NeXl5eURhdGV9ICR7cmVjVGltZX1gLCAnZGQtTU0teXl5eSBoaDptbSBhJykudG9KU0RhdGUoKTtcblxuICAgICAgICBjb25zdCBycnVsZSA9IHJydWxlc3RyKHJydWxlU3RyaW5nLCB7ICdkdHN0YXJ0JzogZHRzdGFydCB9KTtcbiAgICAgICAgY29uc3QgcmVjRGF0ZXMgPSBycnVsZS5iZXR3ZWVuKGR0c3RhcnQsIGVuZERhdGUsIHRydWUpLmZpbHRlcihkYXRlID0+IGRhdGUgPiBuZXcgRGF0ZSgpKTtcbiAgICAgICAgcmV0dXJuIHJlY0RhdGVzLmxlbmd0aCA+IDAgPyByZWNEYXRlc1swXSA6IHN0YXJ0RGF0ZTtcbiAgICB9XG59XG4iXX0=