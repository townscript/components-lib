import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DateTime } from 'luxon';
import { rrulestr } from 'rrule';
var TimeService = /** @class */ (function () {
    function TimeService() {
        var _this = this;
        this.convertDateToTimezone = function (date, timeZoneOffset) {
            var dateVar = DateTime.fromISO(date, { zone: timeZoneOffset });
            var dateString = DateTime.fromISO(dateVar).toString();
            return _this.formatLocalDate(new Date(dateString));
        };
        this.formatLocalDate = function (now) {
            var tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                var norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
        this.dateTimeWithinHours = function (date, hours) {
            var compareDate = Date.now() + (hours * 60 * 60 * 1000);
            var dateTime = date.getTime();
            return compareDate > dateTime && dateTime > Date.now();
        };
        this.nextOccurenceFromRRule = function (startDate, endDate, rruleString, recTime) {
            var ddMMyyyyDate = DateTime.fromJSDate(startDate).toFormat('dd-MM-yyyy');
            var dtstart = DateTime.fromFormat(ddMMyyyyDate + " " + recTime, 'dd-MM-yyyy hh:mm a').toJSDate();
            var rrule = rrulestr(rruleString, { 'dtstart': dtstart });
            var recDates = rrule.between(dtstart, endDate, true).filter(function (date) { return date > new Date(); });
            return recDates.length > 0 ? recDates[0] : startDate;
        };
    }
    TimeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], TimeService);
    return TimeService;
}());
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFHakM7SUFFSTtRQUFBLGlCQUNDO1FBRUQsMEJBQXFCLEdBQUcsVUFBQyxJQUFJLEVBQUUsY0FBYztZQUN6QyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDeEQsT0FBTyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFBO1FBRUQsb0JBQWUsR0FBRyxVQUFDLEdBQUc7WUFDbEIsSUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFDaEMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUMxQixHQUFHLEdBQUcsVUFBVSxHQUFHO2dCQUNmLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDekMsQ0FBQyxDQUFDO1lBQ04sT0FBTyxHQUFHLENBQUMsV0FBVyxFQUFFO2tCQUNsQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7a0JBQzdCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO2tCQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztrQkFDekIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7a0JBQzNCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2tCQUMzQixNQUFNO2tCQUNOLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztrQkFDbkIsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUE7UUFFRCx3QkFBbUIsR0FBRyxVQUFDLElBQVUsRUFBRSxLQUFhO1lBQzVDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQzFELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQyxPQUFPLFdBQVcsR0FBRyxRQUFRLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxDQUFDLENBQUE7UUFFRCwyQkFBc0IsR0FBRyxVQUFDLFNBQWUsRUFBRSxPQUFhLEVBQUUsV0FBbUIsRUFBRSxPQUFlO1lBRTFGLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNFLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUksWUFBWSxTQUFJLE9BQVMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRW5HLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUM1RCxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztZQUN6RixPQUFPLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6RCxDQUFDLENBQUE7SUF4Q0QsQ0FBQztJQUhRLFdBQVc7UUFEdkIsVUFBVSxFQUFFOztPQUNBLFdBQVcsQ0E0Q3ZCO0lBQUQsa0JBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQTVDWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICdsdXhvbic7XG5pbXBvcnQgeyBycnVsZXN0ciB9IGZyb20gJ3JydWxlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIGNvbnZlcnREYXRlVG9UaW1lem9uZSA9IChkYXRlLCB0aW1lWm9uZU9mZnNldCk6IGFueSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGVWYXIgPSBEYXRlVGltZS5mcm9tSVNPKGRhdGUsIHsgem9uZTogdGltZVpvbmVPZmZzZXQgfSk7XG4gICAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBEYXRlVGltZS5mcm9tSVNPKGRhdGVWYXIpLnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdExvY2FsRGF0ZShuZXcgRGF0ZShkYXRlU3RyaW5nKSk7XG4gICAgfVxuXG4gICAgZm9ybWF0TG9jYWxEYXRlID0gKG5vdyk6IGFueSA9PiB7XG4gICAgICAgIGNvbnN0IHR6byA9IC1ub3cuZ2V0VGltZXpvbmVPZmZzZXQoKSxcbiAgICAgICAgICAgIGRpZiA9IHR6byA+PSAwID8gJysnIDogJy0nLFxuICAgICAgICAgICAgcGFkID0gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vcm0gPSBNYXRoLmFicyhNYXRoLmZsb29yKG51bSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiAobm9ybSA8IDEwID8gJzAnIDogJycpICsgbm9ybTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiBub3cuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgKyAnLScgKyBwYWQobm93LmdldE1vbnRoKCkgKyAxKVxuICAgICAgICAgICAgKyAnLScgKyBwYWQobm93LmdldERhdGUoKSlcbiAgICAgICAgICAgICsgJ1QnICsgcGFkKG5vdy5nZXRIb3VycygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICsgJzonICsgcGFkKG5vdy5nZXRTZWNvbmRzKCkpXG4gICAgICAgICAgICArICcuMDAwJ1xuICAgICAgICAgICAgKyBkaWYgKyBwYWQodHpvIC8gNjApXG4gICAgICAgICAgICArIHBhZCh0em8gJSA2MCk7XG4gICAgfVxuXG4gICAgZGF0ZVRpbWVXaXRoaW5Ib3VycyA9IChkYXRlOiBEYXRlLCBob3VyczogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIGNvbnN0IGNvbXBhcmVEYXRlID0gRGF0ZS5ub3coKSArIChob3VycyAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgY29uc3QgZGF0ZVRpbWUgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVEYXRlID4gZGF0ZVRpbWUgJiYgZGF0ZVRpbWUgPiBEYXRlLm5vdygpO1xuICAgIH1cblxuICAgIG5leHRPY2N1cmVuY2VGcm9tUlJ1bGUgPSAoc3RhcnREYXRlOiBEYXRlLCBlbmREYXRlOiBEYXRlLCBycnVsZVN0cmluZzogc3RyaW5nLCByZWNUaW1lOiBzdHJpbmcpOiBEYXRlID0+IHtcblxuICAgICAgICBjb25zdCBkZE1NeXl5eURhdGUgPSBEYXRlVGltZS5mcm9tSlNEYXRlKHN0YXJ0RGF0ZSkudG9Gb3JtYXQoJ2RkLU1NLXl5eXknKTtcbiAgICAgICAgY29uc3QgZHRzdGFydCA9IERhdGVUaW1lLmZyb21Gb3JtYXQoYCR7ZGRNTXl5eXlEYXRlfSAke3JlY1RpbWV9YCwgJ2RkLU1NLXl5eXkgaGg6bW0gYScpLnRvSlNEYXRlKCk7XG5cbiAgICAgICAgY29uc3QgcnJ1bGUgPSBycnVsZXN0cihycnVsZVN0cmluZywgeyAnZHRzdGFydCc6IGR0c3RhcnQgfSk7XG4gICAgICAgIGNvbnN0IHJlY0RhdGVzID0gcnJ1bGUuYmV0d2VlbihkdHN0YXJ0LCBlbmREYXRlLCB0cnVlKS5maWx0ZXIoZGF0ZSA9PiBkYXRlID4gbmV3IERhdGUoKSk7XG4gICAgICAgIHJldHVybiByZWNEYXRlcy5sZW5ndGggPiAwID8gcmVjRGF0ZXNbMF0gOiBzdGFydERhdGU7XG4gICAgfVxufVxuIl19