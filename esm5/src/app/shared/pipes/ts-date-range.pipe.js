import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { DateTime } from 'luxon';
var RangeDatePipe = /** @class */ (function () {
    function RangeDatePipe() {
        var _this = this;
        this.days = { 'SU': 'Sun', 'MO': 'Mon', 'TU': 'Tue', 'WE': 'Wed', 'TH': 'Thu', 'FR': 'Fri', 'SA': 'Sat' };
        this.transform = function (rangeDates, isRecurrent, args) {
            if (rangeDates) {
                // for Recurring events
                if (isRecurrent && args['startTime'] && args['recurrenceRule']) {
                    var startTime = args['startTime'];
                    var freq = args['recurrenceRule'].split(';')[0].split('=')[1];
                    var freqLabel = 'Daily';
                    //custom date selected
                    if (args['recurrenceRule'].indexOf("RDATE") > -1) {
                        freqLabel = 'Multiple Dates';
                    }
                    else {
                        // predefined R Rule
                        if (freq.toLowerCase() == 'Weekly'.toLowerCase()) {
                            var byDays = args['recurrenceRule'].split(';')[2].split('=')[1].split(',');
                            if (byDays.length > 2) {
                                freqLabel = 'Multiple Dates';
                            }
                            else {
                                freqLabel = 'Every ';
                                for (var index = 0; index < byDays.length; index++) {
                                    freqLabel += _this.days[byDays[index]];
                                    if (index < (byDays.length - 1)) {
                                        freqLabel += ', ';
                                    }
                                }
                            }
                        }
                    }
                    return freqLabel + ' | ' + startTime;
                }
                else {
                    // for other events or fallback
                    var date = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('dd'); });
                    var month = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('MMM'); });
                    var year = rangeDates.map(function (d) { return DateTime.fromISO(d).toFormat('yy'); });
                    var time = DateTime.fromISO(rangeDates[0]).toFormat('hh:mm a');
                    var currYear = new Date().getUTCFullYear() % 100;
                    if (year[0] !== year[1]) {
                        return month[0] + ' ' + date[0] + '\'' + year[0] + ' - ' + month[1] + ' ' + date[1] + '\'' + year[1] + ' | ' + time;
                    }
                    else {
                        var yearSt = (year[0] - currYear) != 0 ? " '" + year[0] : '';
                        if ((date[0] === date[1]) && (month[0] === month[1])) {
                            return month[0] + ' ' + date[0] + yearSt + ' | ' + time;
                        }
                        else if ((month[0] !== month[1])) {
                            return month[0] + ' ' + date[0] + yearSt + ' - ' + month[1] + ' ' + date[1] + yearSt + ' | ' + time;
                        }
                        else {
                            return month[0] + ' ' + date[0] + ' - ' + date[1] + yearSt + ' | ' + time;
                        }
                    }
                }
            }
            else {
                return null;
            }
        };
    }
    RangeDatePipe = tslib_1.__decorate([
        Pipe({
            name: 'dateRange'
        })
    ], RangeDatePipe);
    return RangeDatePipe;
}());
export { RangeDatePipe };
//# sourceMappingURL=data:application/json;base64,