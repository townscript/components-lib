import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { DateTime } from 'luxon';
import { UtilityService } from '../services/utilities.service';
var RangeDatePipe = /** @class */ (function () {
    function RangeDatePipe(utilityService) {
        var _this = this;
        this.utilityService = utilityService;
        this.days = { 'SU': 'Sun', 'MO': 'Mon', 'TU': 'Tue', 'WE': 'Wed', 'TH': 'Thu', 'FR': 'Fri', 'SA': 'Sat' };
        this.deprecatedVsNewTimeZones = this.utilityService.deprecatedVsNewTimeZones;
        this.transform = function (rangeDates, eventTimeZone, isRecurrent, args, hideTime) {
            if (!eventTimeZone) {
                eventTimeZone = "Asia/Kolkata";
            }
            else {
                if (_this.deprecatedVsNewTimeZones[eventTimeZone] != undefined)
                    eventTimeZone = _this.deprecatedVsNewTimeZones[eventTimeZone];
            }
            if (rangeDates) {
                // for Recurring events
                if (isRecurrent && args['startTime'] && args['recurrenceRule']) {
                    var startTime = args['startTime'];
                    var endTime = args['endTime'];
                    var freq = args['recurrenceRule'].split(';')[0].split('=')[1];
                    var freqLabel = 'Daily';
                    //custom date selected
                    if (args['recurrenceRule'].indexOf("RDATE") > -1) {
                        freqLabel = 'Multiple Dates';
                    }
                    else {
                        // predefined R Rule
                        if (freq.toLowerCase() == 'Weekly'.toLowerCase()) {
                            var byDays = args['recurrenceRule'].split(';')[2].split('=')[1].split(',');
                            if (byDays.length > 2) {
                                freqLabel = 'Multiple Dates';
                            }
                            else {
                                freqLabel = 'Every ';
                                for (var index = 0; index < byDays.length; index++) {
                                    freqLabel += _this.days[byDays[index]];
                                    if (index < (byDays.length - 1)) {
                                        freqLabel += ', ';
                                    }
                                }
                            }
                        }
                    }
                    return (endTime != undefined ? '' : freqLabel) + (hideTime ? '' : (' | ' + startTime + (endTime != undefined ? ' to ' + endTime : '')));
                }
                else {
                    var local = DateTime.local().setZone(eventTimeZone);
                    // for other events or fallback
                    var date = rangeDates.map(function (d) { return DateTime.fromISO(d, { zone: eventTimeZone }).toFormat('dd'); });
                    var month = rangeDates.map(function (d) { return DateTime.fromISO(d, { zone: eventTimeZone }).toFormat('MMM'); });
                    var year = rangeDates.map(function (d) { return DateTime.fromISO(d, { zone: eventTimeZone }).toFormat('yy'); });
                    var time = DateTime.fromISO(rangeDates[0], { zone: eventTimeZone }).toFormat('hh:mm a');
                    var currYear = new Date().getUTCFullYear() % 100;
                    if (year[0] !== year[1]) {
                        return month[0] + ' ' + date[0] + '\'' + year[0] + ' - ' + month[1] + ' ' + date[1] + '\'' + year[1] + (hideTime ? '' : ' | ' + time);
                    }
                    else {
                        var yearSt = (year[0] - currYear) != 0 ? " '" + year[0] : '';
                        if ((date[0] === date[1]) && (month[0] === month[1])) {
                            return month[0] + ' ' + date[0] + yearSt + (hideTime ? '' : ' | ' + time);
                        }
                        else if ((month[0] !== month[1])) {
                            return month[0] + ' ' + date[0] + yearSt + ' - ' + month[1] + ' ' + date[1] + yearSt + (hideTime ? '' : ' | ' + time);
                        }
                        else {
                            return month[0] + ' ' + date[0] + ' - ' + date[1] + yearSt + (hideTime ? '' : ' | ' + time);
                        }
                    }
                }
            }
            else {
                return null;
            }
        };
    }
    RangeDatePipe = tslib_1.__decorate([
        Pipe({
            name: 'dateRange'
        }),
        tslib_1.__metadata("design:paramtypes", [UtilityService])
    ], RangeDatePipe);
    return RangeDatePipe;
}());
export { RangeDatePipe };
//# sourceMappingURL=data:application/json;base64,