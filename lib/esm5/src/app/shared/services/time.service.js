import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { DateTime } from "luxon";
var TimeService = /** @class */ (function () {
    function TimeService() {
        var _this = this;
        this.convertDateToTimezone = function (date, timeZoneOffset) {
            var date = DateTime.fromISO(date, { zone: timeZoneOffset });
            var dateString = DateTime.fromISO(date).toString();
            return _this.formatLocalDate(new Date(dateString));
        };
        this.formatLocalDate = function (now) {
            var tzo = -now.getTimezoneOffset(), dif = tzo >= 0 ? '+' : '-', pad = function (num) {
                var norm = Math.abs(Math.floor(num));
                return (norm < 10 ? '0' : '') + norm;
            };
            return now.getFullYear()
                + '-' + pad(now.getMonth() + 1)
                + '-' + pad(now.getDate())
                + 'T' + pad(now.getHours())
                + ':' + pad(now.getMinutes())
                + ':' + pad(now.getSeconds())
                + '.000'
                + dif + pad(tzo / 60)
                + pad(tzo % 60);
        };
    }
    TimeService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], TimeService);
    return TimeService;
}());
export { TimeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRvd25zY3JpcHQvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hhcmVkL3NlcnZpY2VzL3RpbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBR2pDO0lBRUk7UUFBQSxpQkFDQztRQUVELDBCQUFxQixHQUFHLFVBQUMsSUFBSSxFQUFFLGNBQWM7WUFDekMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUM1RCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25ELE9BQU8sS0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQztRQUVGLG9CQUFlLEdBQUcsVUFBQyxHQUFHO1lBQ2xCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEVBQzlCLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFDMUIsR0FBRyxHQUFHLFVBQVUsR0FBRztnQkFDZixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDckMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3pDLENBQUMsQ0FBQztZQUNOLE9BQU8sR0FBRyxDQUFDLFdBQVcsRUFBRTtrQkFDbEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2tCQUM3QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztrQkFDeEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7a0JBQ3pCLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2tCQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztrQkFDM0IsTUFBTTtrQkFDTixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7a0JBQ25CLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFBO0lBeEJELENBQUM7SUFIUSxXQUFXO1FBRHZCLFVBQVUsRUFBRTs7T0FDQSxXQUFXLENBNEJ2QjtJQUFELGtCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0E1QlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSBcImx1eG9uXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBjb252ZXJ0RGF0ZVRvVGltZXpvbmUgPSAoZGF0ZSwgdGltZVpvbmVPZmZzZXQpID0+IHtcbiAgICAgICAgdmFyIGRhdGUgPSBEYXRlVGltZS5mcm9tSVNPKGRhdGUsIHsgem9uZTogdGltZVpvbmVPZmZzZXQgfSk7XG4gICAgICAgIHZhciBkYXRlU3RyaW5nID0gRGF0ZVRpbWUuZnJvbUlTTyhkYXRlKS50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRMb2NhbERhdGUobmV3IERhdGUoZGF0ZVN0cmluZykpO1xuICAgIH07XG5cbiAgICBmb3JtYXRMb2NhbERhdGUgPSAobm93KSA9PiB7XG4gICAgICAgIHZhciB0em8gPSAtbm93LmdldFRpbWV6b25lT2Zmc2V0KCksXG4gICAgICAgICAgICBkaWYgPSB0em8gPj0gMCA/ICcrJyA6ICctJyxcbiAgICAgICAgICAgIHBhZCA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybSA9IE1hdGguYWJzKE1hdGguZmxvb3IobnVtKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChub3JtIDwgMTAgPyAnMCcgOiAnJykgKyBub3JtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5vdy5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0TW9udGgoKSArIDEpXG4gICAgICAgICAgICArICctJyArIHBhZChub3cuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgKyAnVCcgKyBwYWQobm93LmdldEhvdXJzKCkpXG4gICAgICAgICAgICArICc6JyArIHBhZChub3cuZ2V0TWludXRlcygpKVxuICAgICAgICAgICAgKyAnOicgKyBwYWQobm93LmdldFNlY29uZHMoKSlcbiAgICAgICAgICAgICsgJy4wMDAnXG4gICAgICAgICAgICArIGRpZiArIHBhZCh0em8gLyA2MClcbiAgICAgICAgICAgICsgcGFkKHR6byAlIDYwKTtcbiAgICB9XG59XG4iXX0=