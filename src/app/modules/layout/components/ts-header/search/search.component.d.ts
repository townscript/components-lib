import { OnInit, ElementRef, QueryList } from '@angular/core';
import { DatePipe } from '@angular/common';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { TimeService } from '../../../../../shared/services/time.service';
import { PlaceService } from '../place.service';
import { HeaderService } from '../ts-header.service';
import { UtilityService } from '../../../../../shared/services/utilities.service';
import { ListKeyManager } from '@angular/cdk/a11y';
import { SearchSuggestionComponent } from '../search-suggestion/search-suggestion.component';
export declare class SearchComponent implements OnInit {
    private utilityService;
    private headerService;
    private placeService;
    private timeService;
    datepipe: DatePipe;
    cityInput: ElementRef;
    citySuggestions: ElementRef;
    searchResultsEle: ElementRef;
    listItems: QueryList<SearchSuggestionComponent>;
    searchText: string;
    algoliaIndexName: any;
    keyboardEventsManager: ListKeyManager<any>;
    typedSearchText: string;
    searchTextChanged: Subject<string>;
    searchActive: boolean;
    citySearchActive: boolean;
    cityPopupActive: boolean;
    placeSearchResults: any;
    searchResults: any;
    activePlace: string;
    emptyResult: boolean;
    cityQuery: string;
    cityQueryChanged: Subject<string>;
    activePlaceBackup: string;
    client: any;
    index: any;
    homeUrl: string;
    router: Router;
    urlArray: any;
    host: any;
    popularPlaces: any;
    intentSelected: boolean;
    constructor(utilityService: UtilityService, headerService: HeaderService, placeService: PlaceService, timeService: TimeService, datepipe: DatePipe);
    buildUrlArray: () => void;
    callAlgolia: (text: any) => void;
    fetchSuggestions: (text: any) => void;
    suggestionSelected: (event: any) => void;
    initKeyManagerHandlers(): void;
    chooseSuggestion: (text: any) => void;
    goToSearchResultsPage: () => void;
    filterDataForSearchResult: (data: any) => void;
    clickout(event: any): void;
    navigateToListing: (interest: string) => void;
    navigateToEventPage: (eventCode: string) => void;
    search: (text: any) => void;
    handleKeydown(event: KeyboardEvent): boolean;
    getPopularPlaces: () => Promise<void>;
    ngOnInit(): void;
}
